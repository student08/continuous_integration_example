<?xml version="1.0" encoding="iso-8859-1"?>
<!--   Augments the book, "Continuous Integration" 
  ISBN-10: 0321336380
  ISBN-13: 978-0321336385
  Copyright 2007 Paul M. Duvall All Rights Reserved.
  Visit www.integratebutton.com 
--> 
<project name="full-build" default="all" basedir=".">

	<import file="${basedir}/_common-environment.xml" />
	<import file="${basedir}/_common-configuration.xml" />

	<path id="lib.path">
		<fileset dir="${lib.dir}" includes="${checkstyle.jar}" />
	</path>

	<path id="checkstyle.classpath">
		<pathelement location="${classes.dir}" />
		<pathelement location="${lib.dir}/${checkstyle.jar}" />
		<pathelement location="${lib.dir}/${commons-beanutils.jar}" />
		<pathelement location="${lib.dir}/${commons-collections.jar}" />
		<pathelement location="${lib.dir}/${commons-logging.jar}" />
	</path>

	<property name="checkstyle.classpath" refid="checkstyle.classpath" />

	<target name="print" if="print.yes">
		<echo>project.class.path = ${project.class.path}</echo>
		<echo>checkstyle.classpath = ${checkstyle.classpath}</echo>
		<echo>functional.tests.on = ${functional.tests.on}</echo>
		<echo>unit.tests.on = ${unit.tests.on}</echo>
		<echo>dependency.analysis.on = ${dependency.analysis.on}</echo>
		<echo>code.coverage.on = ${code.coverage.on}</echo>
		<echo>coding.standards.on = ${coding.standards.on}</echo>
		<echo>dependency.analysis.on = ${dependency.analysis.on}</echo>
		<echo>deployment.on = ${deployment.on}</echo>
		<echo>refresh.scm.on = ${refresh.scm.on}</echo>
		<echo>print.on = ${print.on}</echo>
		<echo>unit.tests.reports.on = ${unit.tests.reports.on}</echo>
	</target>

	<target name="clean">
		<delete dir="${target.dir}" quiet="true" failonerror="false" />
		<delete dir="${reports.dir}" quiet="true" failonerror="false" />
		<delete dir="${deployment.dir}" quiet="true" failonerror="false" />
		<delete dir="${logs.dir}" quiet="true" failonerror="false" />
		<delete dir="${basedir}/docs" quiet="true" failonerror="false" />
		<delete file="cobertura.ser" quiet="true" failonerror="false" />
	</target>

	<target name="uber-clean" depends="clean">
		<delete dir="${lib.dir}" quiet="true" failonerror="false" />
		<delete file="${basedir}/test.lck" failonerror="false" />
		<delete file="${basedir}/test.log" failonerror="false" />
		<delete file="${basedir}/test.properties" failonerror="false" />
		<delete file="${basedir}/test.script" failonerror="false" />
	</target>

	<target name="super-uber-clean" depends="uber-clean">
		<delete includeemptydirs="true">
			<fileset dir="." includes="**/*.svn" />
		</delete>
	</target>

	<target name="init" depends="get-deps">
		<mkdir dir="${classes.dir}" />
		<mkdir dir="${deployment.dir}" />
		<mkdir dir="${build.dir}" />
		<!-- Turn on/off features -->
		<condition property="unit.tests.reports.yes">
			<istrue value="${unit.tests.reports.on}" />
		</condition>
		<condition property="functional.tests.yes">
			<istrue value="${functional.tests.on}" />
		</condition>
		<condition property="coding.standards.yes">
			<istrue value="${coding.standards.on}" />
		</condition>
		<condition property="unit.tests.yes">
			<istrue value="${unit.tests.on}" />
		</condition>
		<condition property="refresh.scm.yes">
			<istrue value="${refresh.scm.on}" />
		</condition>
		<!--><condition property="dependency.analysis.yes">
			<istrue value="${dependency.analysis.on}" />
		</condition>
		-->
		<condition property="deployment.yes">
			<istrue value="${deployment.on}" />
		</condition>
		<condition property="noget">
			<istrue value="${refresh.scm.on}" />
		</condition>
		<condition property="code.coverage.yes">
			<istrue value="${code.coverage.on}" />
		</condition>
		<!--><condition property="dependency.analysis.yes">
			<istrue value="${dependency.analysis.on}" />
		</condition>
		-->
		<condition property="dependency.tests.yes">
			<istrue value="${dependency.tests.on}" />
		</condition>
		<condition property="print.yes">
			<istrue value="${print.on}" />
		</condition>
		<condition property="download.jars.yes">
			<istrue value="${download.jars.on}" />
		</condition>
		
		<condition property="build.machine.yes">
			<and>
				<isset property="environment" />
				<istrue value="util" />
			</and>
		</condition>
		<available property="junit.present" classname="junit.framework.Test" />
		<path id="javancss.classpath">
			<fileset dir="${lib.dir}" />
		</path>
		<taskdef name="javancss" classpathref="javancss.classpath" classname="javancss.JavancssAntTask">
		</taskdef>
		<copy todir="${classes.dir}">
			<fileset dir=".">
				<include name="**/*.properties" />
			</fileset>
		</copy>
	</target>

	<target name="all" depends="clean,init,print,compile,compile-tests,integrate-database,run-tests,run-deploy,run-all-inspections">
	</target>

	<target name="all-no-db" depends="clean,init,print">
		<antcall target="compile" />
		<antcall target="compile-tests" />
		<antcall target="run-tests" />
		<antcall target="run-deploy" />
		<antcall target="run-all-inspections" />
	</target>

	<target name="scm-update" if="refresh.scm.yes">
		<taskdef resource="svntask.properties" classpathref="project.class.path" />
		<svn username="${svn.username}" password="${svn.password}">
			<checkout url="${svn.url}" revision="HEAD" destPath="${svn.destpath}" />
		</svn>
	</target>

	<target name="compile">
      <mkdir dir="${classes.dir}"/>
      <javac destdir="${classes.dir}" debug="true">
        <src path="${src.dir}" />
        <classpath refid="project.class.path"/>
      </javac>
	</target>

	<target name="compile-tests" if="unit.tests.yes">
		<echo message="Running compile-tests target" />
		<ant inheritAll="true" inheritRefs="true" antfile="testing.xml" target="compile-tests" />
	</target>


	<target name="integrate-database">
		<echo message="Running integrate-database target" />
		<ant inheritAll="true" inheritRefs="true" antfile="database-integration.xml" />
	</target>

	<target name="run-tests" if="unit.tests.yes" depends="compile-tests">
		<ant inheritAll="true" inheritRefs="true" antfile="testing.xml" target="run-unit-tests" />
		<ant inheritAll="true" inheritRefs="true" antfile="testing.xml" target="run-component-tests" />	
        <ant inheritAll="true" inheritRefs="true" antfile="testing.xml" target="run-architecture-tests" />	
		<ant inheritAll="true" inheritRefs="true" antfile="testing.xml" target="run-performance-tests" />	
		<ant inheritAll="true" inheritRefs="true" antfile="testing.xml" target="run-load-tests" />
	</target>

	<target name="run-all-inspections">
		<antcall target="run-code-coverage" />
		<antcall target="run-coding-standards" />
		<antcall target="run-code-duplication" />
		<antcall target="run-cyclomatic-complexity" />
	</target>

	<target name="run-deploy" if="deployment.yes">
		<echo message="Running run-deploy target" />
		<ant inheritAll="true" inheritRefs="true" antfile="deployment.xml" target="deploy" />
	</target>

	<target name="run-system-tests">
		<echo message="Running system tests" />
	</target>

	<target name="run-load-tests">
		<echo message="Running load tests..." />
		<ant inheritAll="true" inheritRefs="true" antfile="testing.xml" target="run-load-tests" />	
	</target>

	<target name="run-code-coverage" if="code.coverage.yes">
		<echo message="Running code coverage" />
		<ant inheritAll="true" inheritRefs="true" antfile="inspections.xml" target="run-cobertura" />
	</target>

	<target name="run-coding-standards" if="coding.standards.yes">
		<echo message="Running coding standards checks" />
		<ant inheritAll="true" inheritRefs="true" antfile="inspections.xml" target="run-checkstyle" />
		<ant inheritAll="true" inheritRefs="true" antfile="inspections.xml" target="run-pmd" />
	</target>

	<target name="run-code-duplication">
		<echo message="Running code duplication checks" />
		<!--><ant inheritAll="true" inheritRefs="true" antfile="inspections.xml" target="run-simian" />-->
	</target>

	<target name="run-cyclomatic-complexity">
		<!--><ant inheritAll="true" inheritRefs="true" antfile="inspections.xml" target="run-cyclomatic-complexity" />-->
	</target>

	<target name="get-deps">
		<ant inheritAll="true" inheritRefs="true" antfile="_repository.xml" target="get-deps" />
	</target>

	<target name="start-db">
		<ant inheritAll="true" inheritRefs="true" antfile="database-integration.xml" target="start-db" />
	</target>
	
</project>
